name: 'Build SW Examples'
description: 'Compile Example Target SW'
inputs:
  examples-dir:
    description: 'Examples SW directory'
    required: true
    default: ''
  gnu-dir:
    description: 'GNU TC install directory'
    required: true
    default: ''
  toolchain:
    description: 'Used toolchain (Choices: llvm, gcc)'
    required: true
    default: 'llvm'
  build-type:
    description: 'Value for CMAKE_BUILD_TYPE'
    required: true
    default: 'Release'
  arch:
    description: 'Value for -march=?'
    required: true
    default: '?'
  abi:
    description: 'Value for -mabi=?'
    required: true
    default: '?'
  progs:
    description: 'Comma-separated list of programs'
    required: true
    default: 'hello_world'
  enable-summary:
    description: 'Enable Job Summary'
    required: true
outputs: {}

runs:
  using: "composite"
  steps:
    # TODO merge GCC & GCC step!
    - name: Build Examples (GCC Toolchain)
      if: inputs.toolchain == 'gcc'
      shell: bash
      run: |
        cd ${{ inputs.examples-dir }}
        cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=rv32gc-toolchain.cmake -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} -DCMAKE_INSTALL_PREFIX=$(pwd)/build/install -DRISCV_ARCH=${{ inputs.arch }} -DRISCV_ABI=${{ inputs.abi }} -DRISCV_TOOLCHAIN_PREFIX=$(pwd)/../gnu/ -DRISCV_TOOLCHAIN_BASENAME=${{ inputs.tc-name }}
        for prog in $(echo ${{ inputs.progs }} | sed 's/,/ /'); do
            echo "prog=$prog"
            cmake --build build -j$(nproc) -t $prog
        done
        cmake --install build

    - name: Build Examples (LLVM Toolchain)
      if: inputs.toolchain == 'llvm'
      shell: bash
      run: |
        # TODO: only keep install dir of llvm!
        export PATH=$SEAL5_LLVM_DIR/.seal5/build/${{ env.SEAL5_BUILD_CONFIG }}/bin/:$PATH
        # chmod +x $SEAL5_LLVM_DIR/bin/*
        cd ${{ inputs.examples-dir }}
        cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=rv32gc-llvm-toolchain.cmake -DCMAKE_BUILD_TYPE=${{ inputs.build-type }} -DCMAKE_INSTALL_PREFIX=$(pwd)/build/install -DRISCV_ARCH=${{ inputs.arch }} -DRISCV_ABI=${{ inputs.abi }} -DRISCV_TOOLCHAIN_PREFIX=$(pwd)/../gnu/ -DRISCV_TOOLCHAIN_BASENAME=${{ inputs.tc-name }}
        for prog in $(echo ${{ inputs.progs }} | sed 's/,/ /'); do
            echo "prog=$prog"
            cmake --build build -j$(nproc) -t $prog
        done
        cmake --install build
