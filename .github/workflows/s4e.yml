name: S4E Flow

on:
  workflow_dispatch: {}
  repository_dispatch:
    # types: [cdsl-event, seal5-event, etiss-event, m2isar-event, examples-event]
    # types: [s4e-cdsl-event, seal5-event, etiss-event, m2isar-event, s4e-examples-event]
    types: [cdsl-event, s4e-cdsl-event, seal5-event, etiss-event, m2isar-event, s4e-examples-event]
  push:
    branches: [ "main" ]
    paths:
      - .github/workflows/s4e.yml
      - etiss
      - etiss_riscv_examples_s4e
      - M2-ISA-R
      - seal5
      - riscv-coredsl-extensions
      - etiss_arch_riscv
  pull_request:
    branches: [ "main" ]
    paths:
      - .github/workflows/s4e.yml
      - etiss
      - etiss_riscv_examples_s4e
      - M2-ISA-R
      - seal5
      - riscv-coredsl-extensions
      - etiss_arch_riscv

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  BUILD_TYPE: Release
  SEAL5_LLVM_DIR: /home/runner/work/seal5_llvm  # TO TRAILING /
  SEAL5_OUT_DIR: /home/runner/work/seal5_out/
  SEAL5_BUILD_CONFIG: release
  RISCV_GCC_NAME: riscv32-unknown-elf
  ARCH: rv32im_zicsr_zifencei_xs4emac
  ETISS_TOP: "etiss-s4e-mac"
  ETISS_ARCH: "RV32IMCXS4EMAC"
  ETISS_BASE_ARCH: "RV32IMACFD"
  PROGS: "hello_world,s4emac"  # TODO: support multiple
  ABI: ilp32
  TC_VERSION: "2024.09.03"
  TC_VARIANT: "rv32im_zicsr_zifencei_ilp32"
  TC_NAME: "riscv32-unknown-elf"
  TC_OS: "ubuntu"
  LLVM_REF: "llvmorg-19.1.7"
  TOOLCHAIN: "llvm"

jobs:
  flow:
    strategy:
      # fail-fast: false
      fail-fast: true
      matrix:
        ubuntu-version:
        - 22.04
        python-version:
        - "3.10"
    runs-on: ubuntu-${{ matrix.ubuntu-version }}
    steps:

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install APT dependencies
      run: |
        sudo apt-get update
        sudo apt -qq install -y python3-pip python3-venv cmake make ninja-build libboost-system-dev libboost-filesystem-dev libboost-program-options-dev

    - name: Configure Git
      run: |
        git config --global user.name "${GITHUB_ACTOR}"
        git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1
      with:
        max-size: 2G
        key: ubuntu-${{ matrix.ubuntu-version }}-s4e-${{ env.SEAL5_BUILD_CONFIG }}
        variant: sccache

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install virtualenv

    - name: Clone Repo and Submodules
      uses: actions/checkout@v4
      with:
         submodules: recursive

    - name: Add Summary Header
      run: |
        echo "### Summary" >> $GITHUB_STEP_SUMMARY
        echo >> $GITHUB_STEP_SUMMARY

    - name: Update Summary (Trigger)
      run: |
        echo "Event: ${{github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "Triggered from: ${{ github.event.client_payload.from }}" >> $GITHUB_STEP_SUMMARY
        echo >> $GITHUB_STEP_SUMMARY

    - name: Update Submodule Refs
      id: update-refs
      uses: ./.github/actions/update-refs
      if: github.event.client_payload.from != ''
      with:
          trigger: ${{ github.event.client_payload.from }}
          ref: ${{ github.event.client_payload.ref }}
          enable-summary: true

    - name: Prepare PR Branch
      id: prepare-pr
      if: steps.update-refs.outputs.num-changed != '0'
      uses: ./.github/actions/prepare-pr

    - name: CDSL Workaround
      run: |
        # workaround for messy include paths
        cd riscv-coredsl-extensions
        ln -s ../etiss_arch_riscv/rv_base CoreDSL-Instruction-Set-Description
        sed -i "s/RV32I.core_desc/RVI.core_desc/g" etiss-s4e-mac.core_desc
        sed -i "s/\.\.\/rv_base\/RV32I.core_desc/CoreDSL-Instruction-Set-Description\/RVI.core_desc/g" s4e-mac.core_desc
        sed -i "s/RV32I.core_desc/RVI.core_desc/g" tum_mod.core_desc
        sed -i "s/RISCVEncoding.core_desc/CoreDSL-Instruction-Set-Description\/RISCVEncoding.core_desc/g" tum_mod.core_desc
        sed -i "s/bool extension_enabled/bool extension_enabled2/g" tum_mod.core_desc
        ls
        cat etiss-s4e-mac.core_desc
        cat s4e-mac.core_desc
        cat tum_mod.core_desc

    - name: Download Cached ETISS Binaries (S4E)
      id: cache-etiss
      uses: actions/cache@v4
      env:
        cache-name: cache-etiss-binaries
      with:
        path: etiss/build/install
        key: etiss-binaries-s4e-${{ matrix.ubuntu-version }}-${{ steps.update-refs.outputs.etiss_ref }}-${{ steps.update-refs.outputs.m2isar_ref }}-${{ steps.update-refs.outputs.s4e_cdsl_ref }}

    # TODO: cache m2 artifacts
    - name: Setup & Run M2-ISA-R
      if: steps.cache-etiss.outputs.cache-hit != 'true'
      uses: ./.github/actions/run-m2isar
      with:
        python-version: ${{ matrix.python-version }}
        enable-summary: true
        # TODO: merge into one input
        cdsl-top-name: ${{ env.ETISS_TOP }}
        cdsl-top-dir: ${{ github.workspace }}/riscv-coredsl-extensions

    - name: Patch & Build ETISS
      if: steps.cache-etiss.outputs.cache-hit != 'true'
      uses: ./.github/actions/setup-etiss
      with:
        enable-summary: true
        cdsl-top-name: ${{ env.ETISS_TOP }}
        cdsl-top-dir: ${{ github.workspace }}/riscv-coredsl-extensions
        etiss-arch: ${{ env.ETISS_ARCH }}
        etiss-arch-base: ${{ env.ETISS_BASE_ARCH }}
        build-type: ${{ env.BUILD_TYPE }}

    - name: Download Cached Seal5 Binaries
      id: cache-seal5
      uses: actions/cache@v4
      env:
        cache-name: cache-seal5-binaries
      with:
        path: ${{ env.SEAL5_LLVM_DIR }}.tar.xz
        # path: ${{ env.SEAL5_OUT_DIR }}/seal5_llvm_install
        key: seal5-binaries-s4e-${{ matrix.ubuntu-version }}-${{ matrix.python-version }}-${{ steps.update-refs.outputs.seal5_ref }}-${{ steps.update-refs.outputs.s4e_cdsl_ref }}-${{ env.SEAL5_BUILD_CONFIG }}
        # restore-keys: |
        #   seal5-binaries-${{ github.event.client_payload.name }}-${{ matrix.ubuntu-version }}-
        #   seal5-binaries-${{ github.event.client_payload.name }}-

    - name: Setup & Run Seal5
      if: steps.cache-seal5.outputs.cache-hit != 'true'
      uses: ./.github/actions/setup-seal5
      with:
        enable-summary: true
        out-dir: ${{ env.SEAL5_OUT_DIR }}
        install-dir: ${{ env.SEAL5_LLVM_DIR }}
        cdsl-dir: ${{ github.workspace }}/riscv-coredsl-extensions }}
        build-config: ${{ env.SEAL5_BUILD_CONFIG }}
        llvm-ref: ${{ env.LLVM_REF }}
        demo-script: ${{ github.workspace }}/seal5/examples/s4e_demo.py

    - name: Unpack Seal5 Archive
      if: steps.cache-seal5.outputs.cache-hit == 'true'
      run: |
        mkdir ${{ env.SEAL5_LLVM_DIR }}
        cd ${{ env.SEAL5_LLVM_DIR }}
        tar xf ${{ env.SEAL5_LLVM_DIR }}.tar.xz
        cd -
        echo "Seal5 Cache Hit -> unpacking artifact" >> $GITHUB_STEP_SUMMARY

    - name: Get current date
      run: |
        echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT
      id: date

    - name: Download Cached GCC Binaries
      id: cache-gcc
      uses: actions/cache@v4
      env:
        cache-name: cache-gcc-binaries
      with:
        path: gnu/  # TODO: move?
        key: gcc-binaries-${{ env.TC_OS }}-${{ matrix.ubuntu-version }}-${{ env.TC_NAME }}-${{ env.TC_VERSION }}-${{ env.TC_VARIANT }}-${{ steps.date.outputs.date }}
        # restore-keys: |
        #   gcc-binaries-${{ matrix.ubuntu-version }}-${{ env.TC_NAME}}-${{ env.TC_VERSION }}-${{ env.TC_VARIANT }}

    - name: Download GNU Toolchain
      if: steps.cache-gcc.outputs.cache-hit != 'true'
      uses: ./.github/actions/setup-gnu
      with:
        enable-summary: true
        install-dir: ${{ github.workspace }}/gnu
        version: ${{ env.TC_VERSION }}
        name: ${{ env.TC_NAME }}
        variant: ${{ env.TC_VARIANT }}
        os: ${{ env.TC_NAME }}-${{ env.TC_OS }}


    # - name: Build Examples
    #   run: |
    #     export PATH=$SEAL5_LLVM_DIR/bin/:$PATH
    #     # chmod +x $SEAL5_LLVM_DIR/bin/*
    #     cd etiss_riscv_examples
    #     cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE=rv32gc-llvm-toolchain.cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_INSTALL_PREFIX=$(pwd)/build/install -DRISCV_ARCH=${{ env.ARCH }} -DRISCV_ABI=${{ env.ABI }} -DRISCV_TOOLCHAIN_PREFIX=$(pwd)/../gnu/ -DRISCV_TOOLCHAIN_BASENAME=${{ env.RISCV_GCC_NAME }}
    #     cmake --build build -j$(nproc) -t ${{ env.PROG }}
    #     cmake --install build

    - name: Build Examples
      uses: ./.github/actions/build-examples
      with:
        enable-summary: true
        examples-dir: ${{ github.workspace }}/etiss_riscv_examples_s4e
        gnu-dir: ${{ github.workspace }}/gnu
        toolchain: ${{ env.TOOLCHAIN }}
        build-type: ${{ env.BUILD_TYPE }}
        arch: ${{ env.ARCH }}
        abi: ${{ env.ABI }}
        progs: ${{ env.PROGS }}
        tc-name: ${{ env.TC_NAME }}

    # TODO: commit etiss changes? -> Generate patch file?

    # - name: Run Example ${{ env.PROG }} on ${{ env.ETISS_ARCH }}
    #     run: |
    #       # chmod +x $ETISS_PREBUILT_DIR/bin/bare_etiss_processor
    #       # export LD_LIBRARY_PATH=$ETISS_PREBUILT_DIR/lib:$ETISS_PREBUILT_DIR/lib/plugins:$LD_LIBRRARY_PATH
    #       # export PATH=$ETISS_PREBUILT_DIR/bin/:$PATH
    #       etiss/build/install/bin/bare_etiss_processor -ietiss_riscv_examples/build/install/ini/${{ env.PROG }}.ini --arch.cpu=${{ env.ETISS_ARCH }} 2>&1 | tee out.txt

    - name: Run Examples
      uses: ./.github/actions/run-examples
      with:
        enable-summary: true
        examples-dir: ${{ github.workspace }}/etiss_riscv_examples_s4e
        etiss-install-dir: ${{ github.workspace }}/etiss/build/install
        etiss-arch: ${{ env.ETISS_ARCH }}
        progs: ${{ env.PROGS }}

    # TODO: move to action? (pass artifact name via inputs)
    - name: Upload ETISS Outputs
      uses: actions/upload-artifact@v4
      with:
        name: etiss-output-s4e-${{ env.PROGS }}-${{ env.ETISS_ARCH }}-${{ matrix.ubuntu-version }}-${{ env.BUILD_TYPE }}-${{ env.TC_VERSION }}-${{ env.TC_VARIANT }}-${{ env.ARCH }}-${{ env.ABI }}
        path: out.txt

    - name: Cleanup
      run: rm out.txt

    - name: Finalize PR
      if: steps.update-refs.outputs.num-changed != '0'
      uses: ./.github/actions/finalize-pr
      with:
        enable-summary: true
        trigger: ${{ github.event.client_payload.from }}
        branch-name: ${{ steps.prepare-pr.outputs.branch-name }}
        ref: ${{ github.event.client_payload.ref }}
        branch-exists: ${{ steps.prepare-pr.outputs.branch-exists }}
